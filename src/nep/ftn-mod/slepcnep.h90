!
!  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!  SLEPc - Scalable Library for Eigenvalue Problem Computations
!  Copyright (c) 2002-, Universitat Politecnica de Valencia, Spain
!
!  This file is part of SLEPc.
!  SLEPc is distributed under a 2-clause BSD license (see LICENSE).
!  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!
      interface NEPNLEIGSGetRKShifts
        subroutine NEPNLEIGSGetRKShifts(a,b,c,z)
          use, intrinsic :: ISO_C_BINDING
          import tNEP
          NEP a
          PetscInt b
          PetscScalar c(*)
          PetscErrorCode z
        end subroutine
      end interface NEPNLEIGSGetRKShifts
#if defined(_WIN32) && defined(PETSC_USE_SHARED_LIBRARIES)
!DEC$ ATTRIBUTES DLLEXPORT::NEPNLEIGSGetRKShifts
#endif

      interface NEPSetFunction
        subroutine NEPSetFunction(a,b,c,d,e,z)
          use, intrinsic :: ISO_C_BINDING
          import tNEP, tMat
          NEP a
          Mat b
          Mat c
          external d
          type(*) e
          PetscErrorCode z
        end subroutine
      end Interface NEPSetFunction
#if defined(_WIN32) && defined(PETSC_USE_SHARED_LIBRARIES)
!DEC$ ATTRIBUTES DLLEXPORT::NEPSetFunction
#endif

      interface NEPSetJacobian
        subroutine NEPSetJacobian(a,b,c,d,z)
          use, intrinsic :: ISO_C_BINDING
          import tNEP, tMat
          NEP a
          Mat b
          external c
          type(*) d
          PetscErrorCode z
        end subroutine
      end Interface NEPSetJacobian
#if defined(_WIN32) && defined(PETSC_USE_SHARED_LIBRARIES)
!DEC$ ATTRIBUTES DLLEXPORT::NEPSetJacobian
#endif

      interface NEPNLEIGSSetSingularitiesFunction
        subroutine NEPNLEIGSSetSingularitiesFunction(a,b,c,z)
          use, intrinsic :: ISO_C_BINDING
          import tNEP
          NEP a
          external b
          type(*) c
          PetscErrorCode z
        end subroutine
      end Interface NEPNLEIGSSetSingularitiesFunction
#if defined(_WIN32) && defined(PETSC_USE_SHARED_LIBRARIES)
!DEC$ ATTRIBUTES DLLEXPORT::NEPNLEIGSSetSingularitiesFunction
#endif

      interface NEPMonitorSet
        subroutine NEPMonitorSet(a,b,c,d,z)
          use, intrinsic :: ISO_C_BINDING
          import tNEP
          NEP a
          external b
          type(*) c
          external d
          PetscErrorCode z
        end subroutine
      end Interface NEPMonitorSet
#if defined(_WIN32) && defined(PETSC_USE_SHARED_LIBRARIES)
!DEC$ ATTRIBUTES DLLEXPORT::NEPMonitorSet
#endif

      external NEPMonitorConvergedCreate
      external NEPMonitorConvergedDestroy
